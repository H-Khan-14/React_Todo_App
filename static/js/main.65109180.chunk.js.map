{"version":3,"sources":["components/App.js","index.js"],"names":["styles","complete","textDecoration","incomplete","ToDo","todo","handleToggle","id","name","value","onClick","e","preventDefault","currentTarget","style","task","ToDoList","toDoList","handleFilter","map","margin","ToDoForm","addTask","useState","userInput","setUserInput","onSubmit","type","onChange","placeholder","App","setToDoList","completedToDoList","setCompletedToDoList","useEffect","completed","filter","className","mapped","Number","filtered","copy","length","ReactDOM","render","document","querySelector"],"mappings":"wMAEMA,EAAS,CACXC,SAAU,CAAEC,eAAgB,gBAC5BC,WAAY,CAAED,eAAgB,SAE5BE,EAAO,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAOnB,OACI,qBAAKC,GAAIF,EAAKE,GAA8BC,KAAK,OAAOC,MAAOJ,EAAKE,GAAIG,QANxD,SAACC,GACjBA,EAAEC,iBACFN,EAAaK,EAAEE,cAAcN,KAIiEO,MAAOT,EAAKJ,SAAWD,EAAOC,SAAWD,EAAOG,WAA9I,SACKE,EAAKU,MADaV,EAAKE,GAAKF,EAAKU,OAMtCC,EAAW,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUX,EAAgC,EAAhCA,aAAcY,EAAkB,EAAlBA,aACvC,OACI,gCACKD,EAASE,KAAI,SAAAd,GACV,OACI,cAAC,EAAD,CAAMA,KAAMA,EAAMC,aAAcA,EAAcY,aAAcA,OAGpE,wBAAQJ,MAAO,CAACM,OAAQ,QAASV,QAASQ,EAA1C,iCAKNG,EAAW,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAEMC,mBAAS,IAFf,mBAEtBC,EAFsB,KAEXC,EAFW,KAa9B,OACI,uBAAMC,SANW,SAACf,GAClBA,EAAEC,iBACFU,EAAQE,GACRC,EAAa,KAGb,UACI,uBAAOhB,MAAOe,EAAWG,KAAK,OAAOC,SAXxB,SAACjB,GAClBc,EAAad,EAAEE,cAAcJ,QAUoCoB,YAAY,kBACzE,gDAqDGC,MA/Cf,WAEE,IAFa,EAQqBP,mBANrB,CAAC,CACZ,GAAM,EACN,KAAQ,eACR,UAAY,KALD,mBAQLN,EARK,KAQKc,EARL,OASsCR,mBAAS,IAT/C,mBASLS,EATK,KAScC,EATd,KAsCb,OA3BAC,qBAAU,WACR,IAAIC,EAAYlB,EAASmB,QAAO,SAAArB,GAC9B,OAAOA,EAAKd,YAEdgC,EAAqBE,KACpB,CAAClB,IAuBF,sBAAKoB,UAAU,MAAf,UACE,cAAC,EAAD,CAAUpB,SAAUA,EAAUX,aAtBb,SAACC,GACpB,IAAI+B,EAASrB,EAASE,KAAI,SAAAJ,GACxB,OAAOA,EAAKR,KAAOgC,OAAOhC,GAAnB,2BAA8BQ,GAA9B,IAAoCd,UAAWc,EAAKd,WAApD,eAAsEc,MAE/EgB,EAAYO,IAkBgDpB,aAfzC,WACnB,IAAIsB,EAAWvB,EAASmB,QAAO,SAAArB,GAC7B,OAAQA,EAAKd,YAEf8B,EAAYS,MAYV,cAAC,EAAD,CAAUlB,QATE,SAACE,GACf,IAAIiB,EAAI,YAAOxB,GACfwB,EAAI,sBAAOA,GAAP,CAAa,CAAElC,GAAIU,EAASyB,OAAS,EAAG3B,KAAMS,EAAWvB,UAAU,KACvE8B,EAAYU,MAOV,8BAAIT,EAAkBU,OAAtB,qBAAgDzB,EAASyB,cCtF/DC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.65109180.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst styles = {\n    complete: { textDecoration: \"line-through\"},\n    incomplete: { textDecoration: \"none\"}\n}\nconst ToDo = ({todo, handleToggle}) => {\n\n  const handleClick = (e) => {\n      e.preventDefault()\n      handleToggle(e.currentTarget.id)\n  }\n\n  return (\n      <div id={todo.id} key={todo.id + todo.task} name=\"todo\" value={todo.id} onClick={handleClick} style={todo.complete ? styles.complete : styles.incomplete}>\n          {todo.task}\n      </div>\n  );\n};\n\nconst ToDoList = ({toDoList, handleToggle, handleFilter}) => {\n    return (\n        <div>\n            {toDoList.map(todo => {\n                return (\n                    <ToDo todo={todo} handleToggle={handleToggle} handleFilter={handleFilter}/>\n                )\n            })}\n            <button style={{margin: '20px'}} onClick={handleFilter}>Clear Completed</button>\n        </div>\n    );\n};\n\nconst ToDoForm = ({ addTask }) => {\n\n    const [ userInput, setUserInput ] = useState('');\n\n    const handleChange = (e) => {\n        setUserInput(e.currentTarget.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        addTask(userInput);\n        setUserInput(\"\");\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input value={userInput} type=\"text\" onChange={handleChange} placeholder=\"Enter task...\"/>\n            <button>Submit</button>\n        </form>\n    );\n};\n\n\nfunction App() {\n\n  const data = [{\n    \"id\": 1,\n    \"task\": \"Eat icecream\",\n    \"complete\": false\n  }];\n  \n  const [ toDoList, setToDoList ] = useState(data);\n  const [ completedToDoList, setCompletedToDoList] = useState([]);\n\n  useEffect(() => {\n    let completed = toDoList.filter(task => {\n      return task.complete;\n    });\n    setCompletedToDoList(completed);\n  }, [toDoList]);\n\n  const handleToggle = (id) => {\n    let mapped = toDoList.map(task => {\n      return task.id === Number(id) ? { ...task, complete: !task.complete } : { ...task};\n    });\n    setToDoList(mapped);\n  }\n\n  const handleFilter = () => {\n    let filtered = toDoList.filter(task => {\n      return !task.complete;\n    });\n    setToDoList(filtered);\n  }\n\n  const addTask = (userInput ) => {\n    let copy = [...toDoList];\n    copy = [...copy, { id: toDoList.length + 1, task: userInput, complete: false }];\n    setToDoList(copy);\n  }\n\n  return (\n    <div className=\"App\">\n      <ToDoList toDoList={toDoList} handleToggle={handleToggle} handleFilter={handleFilter}/>\n      <ToDoForm addTask={addTask}/>\n      <p>{completedToDoList.length} remaining out of {toDoList.length}</p>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nconst DATA = [\n  { id: 'todo-0', name: 'Eat', completed: true },\n  { id: 'todo-1', name: 'Sleep', completed: false },\n  { id: 'todo-2', name: 'Repeat', completed: false },\n];\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}